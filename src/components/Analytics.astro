---
// Analytics Dashboard Component
// Displays key business metrics and performance indicators

interface Props {
  className?: string;
  timeRange?: '7d' | '30d' | '90d' | '1y';
}

const { className = '', timeRange = '30d' } = Astro.props;

// Mock analytics data (in production, fetch from analytics API)
const analyticsData = {
  '7d': {
    visitors: 1234,
    pageViews: 4567,
    bounceRate: 45.2,
    avgSession: '2m 34s',
    conversions: 89,
    revenue: 12450,
  },
  '30d': {
    visitors: 5678,
    pageViews: 18934,
    bounceRate: 42.1,
    avgSession: '3m 12s',
    conversions: 342,
    revenue: 56780,
  },
  '90d': {
    visitors: 15234,
    pageViews: 52891,
    bounceRate: 39.8,
    avgSession: '3m 45s',
    conversions: 1025,
    revenue: 178900,
  },
  '1y': {
    visitors: 67890,
    pageViews: 234567,
    bounceRate: 37.5,
    avgSession: '4m 21s',
    conversions: 4567,
    revenue: 789123,
  },
};

const currentData = analyticsData[timeRange];

const formatNumber = (num: number): string => {
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 0,
  }).format(amount);
};
---

<div class={`analytics-dashboard ${className}`}>
  <div class="analytics-header">
    <h2>Analytics Overview</h2>
    <div class="time-range-selector">
      <button class={timeRange === '7d' ? 'active' : ''} data-range="7d"
        >7 Days</button
      >
      <button class={timeRange === '30d' ? 'active' : ''} data-range="30d"
        >30 Days</button
      >
      <button class={timeRange === '90d' ? 'active' : ''} data-range="90d"
        >90 Days</button
      >
      <button class={timeRange === '1y' ? 'active' : ''} data-range="1y"
        >1 Year</button
      >
    </div>
  </div>

  <div class="metrics-grid">
    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <circle cx="9" cy="7" r="4" stroke="currentColor" stroke-width="2"
          ></circle>
          <path
            d="M22 21v-2a4 4 0 0 0-3-3.87"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <path
            d="M16 3.13a4 4 0 0 1 0 7.75"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{formatNumber(currentData.visitors)}</div>
        <div class="metric-label">Unique Visitors</div>
        <div class="metric-change positive">+12.5%</div>
      </div>
    </div>

    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <path
            d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{formatNumber(currentData.pageViews)}</div>
        <div class="metric-label">Page Views</div>
        <div class="metric-change positive">+8.3%</div>
      </div>
    </div>

    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M22 12h-4l-3 9L9 3l-3 9H2"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{currentData.bounceRate}%</div>
        <div class="metric-label">Bounce Rate</div>
        <div class="metric-change negative">-3.2%</div>
      </div>
    </div>

    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"
          ></circle>
          <polyline
            points="12,6 12,12 16,14"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></polyline>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{currentData.avgSession}</div>
        <div class="metric-label">Avg. Session</div>
        <div class="metric-change positive">+15.7%</div>
      </div>
    </div>

    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <rect
            x="8"
            y="2"
            width="8"
            height="4"
            rx="1"
            ry="1"
            stroke="currentColor"
            stroke-width="2"></rect>
          <path
            d="m9 14 2 2 4-4"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{formatNumber(currentData.conversions)}</div>
        <div class="metric-label">Conversions</div>
        <div class="metric-change positive">+22.1%</div>
      </div>
    </div>

    <div class="metric-card">
      <div class="metric-icon">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <line
            x1="12"
            y1="1"
            x2="12"
            y2="23"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></line>
          <path
            d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </div>
      <div class="metric-content">
        <div class="metric-value">{formatCurrency(currentData.revenue)}</div>
        <div class="metric-label">Revenue</div>
        <div class="metric-change positive">+28.9%</div>
      </div>
    </div>
  </div>

  <div class="analytics-chart">
    <h3>Traffic Overview</h3>
    <div class="chart-placeholder">
      <div class="chart-bars">
        <div class="chart-bar" style="height: 65%"></div>
        <div class="chart-bar" style="height: 45%"></div>
        <div class="chart-bar" style="height: 80%"></div>
        <div class="chart-bar" style="height: 55%"></div>
        <div class="chart-bar" style="height: 90%"></div>
        <div class="chart-bar" style="height: 75%"></div>
        <div class="chart-bar" style="height: 85%"></div>
      </div>
      <div class="chart-labels">
        <span>Mon</span>
        <span>Tue</span>
        <span>Wed</span>
        <span>Thu</span>
        <span>Fri</span>
        <span>Sat</span>
        <span>Sun</span>
      </div>
    </div>
  </div>
</div>

<style>
  .analytics-dashboard {
    background: var(--card-bg);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid var(--border-color);
  }

  .analytics-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .analytics-header h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .time-range-selector {
    display: flex;
    gap: 0.5rem;
  }

  .time-range-selector button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    background: transparent;
    color: var(--text-muted);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
  }

  .time-range-selector button:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }

  .time-range-selector button.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .metric-card {
    background: var(--background);
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.3s ease;
  }

  .metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    border-color: var(--primary-color);
  }

  .metric-icon {
    width: 48px;
    height: 48px;
    background: linear-gradient(
      135deg,
      var(--primary-color),
      var(--secondary-color)
    );
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    flex-shrink: 0;
  }

  .metric-content {
    flex: 1;
  }

  .metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1.2;
  }

  .metric-label {
    font-size: 0.875rem;
    color: var(--text-muted);
    margin-bottom: 0.25rem;
  }

  .metric-change {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.125rem 0.5rem;
    border-radius: 4px;
    display: inline-block;
  }

  .metric-change.positive {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .metric-change.negative {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .analytics-chart {
    background: var(--background);
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--border-color);
  }

  .analytics-chart h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .chart-placeholder {
    height: 200px;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }

  .chart-bars {
    display: flex;
    align-items: flex-end;
    gap: 1rem;
    height: 160px;
    margin-bottom: 1rem;
  }

  .chart-bar {
    flex: 1;
    background: linear-gradient(
      to top,
      var(--primary-color),
      var(--secondary-color)
    );
    border-radius: 4px 4px 0 0;
    min-height: 20px;
    transition: all 0.3s ease;
  }

  .chart-bar:hover {
    opacity: 0.8;
  }

  .chart-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  @media (max-width: 768px) {
    .analytics-dashboard {
      padding: 1rem;
    }

    .analytics-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
    }

    .metric-card {
      padding: 1rem;
    }

    .chart-bars {
      gap: 0.5rem;
    }
  }
</style>

<script>
  // Handle time range selection
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.time-range-selector button');
    buttons.forEach(button => {
      button.addEventListener('click', e => {
        const target = e.target as HTMLButtonElement;
        const range = target.dataset.range;

        // Update active state
        buttons.forEach(btn => btn.classList.remove('active'));
        target.classList.add('active');

        // In a real application, this would fetch new data
        window.dispatchEvent(
          new CustomEvent('analytics:range-change', {
            detail: { range },
          })
        );
      });
    });
  });
</script>
