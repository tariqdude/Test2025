---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive' | 'success' | 'warning' | 'gradient' | 'neon';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  target?: '_blank' | '_self' | '_parent' | '_top';
  disabled?: boolean;
  className?: string;
  type?: 'button' | 'submit' | 'reset';
  onClick?: string;
  loading?: boolean;
  leftIcon?: string;
  rightIcon?: string;
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'full';
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
}

const {
  variant = 'primary',
  size = 'md',
  href,
  target,
  disabled = false,
  className = '',
  type = 'button',
  onClick,
  loading = false,
  leftIcon,
  rightIcon,
  rounded = 'lg',
  shadow = 'md',
  ...rest
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-semibold transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transform-gpu active:scale-95 relative overflow-hidden';

const variants = {
  primary: 'bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 text-white hover:from-blue-700 hover:via-blue-800 hover:to-blue-900 focus:ring-blue-500 shadow-blue-500/25',
  secondary: 'bg-gradient-to-r from-gray-600 via-gray-700 to-gray-800 text-white hover:from-gray-700 hover:via-gray-800 hover:to-gray-900 focus:ring-gray-500 shadow-gray-500/25 dark:from-gray-500 dark:via-gray-600 dark:to-gray-700',
  outline: 'border-2 border-blue-600 text-blue-600 bg-transparent hover:bg-blue-600 hover:text-white focus:ring-blue-500 backdrop-blur-sm dark:border-blue-400 dark:text-blue-400 dark:hover:bg-blue-600',
  ghost: 'text-gray-700 bg-transparent hover:bg-gray-100 hover:text-gray-900 focus:ring-gray-500 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white',
  destructive: 'bg-gradient-to-r from-red-600 via-red-700 to-red-800 text-white hover:from-red-700 hover:via-red-800 hover:to-red-900 focus:ring-red-500 shadow-red-500/25',
  success: 'bg-gradient-to-r from-green-600 via-green-700 to-green-800 text-white hover:from-green-700 hover:via-green-800 hover:to-green-900 focus:ring-green-500 shadow-green-500/25',
  warning: 'bg-gradient-to-r from-yellow-500 via-yellow-600 to-yellow-700 text-white hover:from-yellow-600 hover:via-yellow-700 hover:to-yellow-800 focus:ring-yellow-500 shadow-yellow-500/25',
  gradient: 'bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 text-white hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 focus:ring-purple-500 shadow-purple-500/25',
  neon: 'bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 text-white hover:from-cyan-600 hover:via-blue-600 hover:to-purple-600 focus:ring-cyan-500 shadow-cyan-500/50 border border-cyan-400/50'
};

const sizes = {
  xs: 'px-2.5 py-1.5 text-xs',
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-2.5 text-base',
  lg: 'px-6 py-3 text-lg',
  xl: 'px-8 py-4 text-xl'
};

const roundedClasses = {
  none: 'rounded-none',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  full: 'rounded-full'
};

const shadowClasses = {
  none: '',
  sm: 'shadow-sm hover:shadow-md',
  md: 'shadow-md hover:shadow-lg',
  lg: 'shadow-lg hover:shadow-xl',
  xl: 'shadow-xl hover:shadow-2xl'
};

const hoverEffects = 'hover:-translate-y-0.5 hover:scale-105';
const focusEffects = 'focus:translate-y-0 focus:scale-100';

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${roundedClasses[rounded]} ${shadowClasses[shadow]} ${hoverEffects} ${focusEffects} ${className}`.trim();

const Tag = href ? 'a' : 'button';
const linkProps = href ? { href, target } : {};
const buttonProps = href ? {} : { type, disabled: disabled || loading };
---

<Tag
  class={classes}
  {...linkProps}
  {...buttonProps}
  {...(onClick && { 'onclick': onClick })}
  {...rest}
>
  {/* Loading spinner */}
  {loading && (
    <div class="absolute inset-0 flex items-center justify-center bg-inherit rounded-inherit">
      <div class="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent"></div>
    </div>
  )}
  
  {/* Button content */}
  <div class={`flex items-center gap-2 ${loading ? 'opacity-0' : 'opacity-100'} transition-opacity`}>
    {leftIcon && <span class="text-current">{leftIcon}</span>}
    <slot />
    {rightIcon && <span class="text-current">{rightIcon}</span>}
  </div>
  
  {/* Shimmer effect */}
  <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent transition-transform duration-1000"></div>
</Tag>

<style>
  /* Custom animations */
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  .group:hover .shimmer {
    animation: shimmer 1s ease-in-out;
  }
</style>
