---
export interface ModernButtonProps {
  variant?: 'primary' | 'secondary' | 'glass' | 'neon' | 'gradient' | 'minimal' | 'floating' | 'magnetic';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  shape?: 'rounded' | 'pill' | 'square' | 'circle';
  effect?: 'ripple' | 'glow' | 'magnetic' | 'float' | 'pulse';
  loading?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  leftIcon?: string;
  rightIcon?: string;
  href?: string;
  target?: string;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

const {
  variant = 'primary',
  size = 'md',
  shape = 'rounded',
  effect,
  loading = false,
  disabled = false,
  fullWidth = false,
  leftIcon,
  rightIcon,
  href,
  target,
  type = 'button',
  className = '',
  ...rest
} = Astro.props as ModernButtonProps;

const Tag = href ? 'a' : 'button';

const baseClasses = [
  'inline-flex',
  'items-center',
  'justify-center',
  'font-semibold',
  'transition-all',
  'duration-300',
  'ease-out',
  'relative',
  'overflow-hidden',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-offset-2',
  'group',
  'transform-gpu',
];

const sizeClasses = {
  xs: 'px-3 py-1.5 text-xs gap-1.5',
  sm: 'px-4 py-2 text-sm gap-2',
  md: 'px-6 py-3 text-base gap-2',
  lg: 'px-8 py-4 text-lg gap-3',
  xl: 'px-10 py-5 text-xl gap-4',
};

const shapeClasses = {
  rounded: 'rounded-lg',
  pill: 'rounded-full',
  square: 'rounded-none',
  circle: 'rounded-full aspect-square p-3',
};

const variantClasses = {
  primary: [
    'bg-gradient-to-r',
    'from-blue-600',
    'to-purple-600',
    'text-white',
    'shadow-lg',
    'hover:from-blue-700',
    'hover:to-purple-700',
    'hover:shadow-xl',
    'hover:-translate-y-1',
    'active:translate-y-0',
    'focus:ring-blue-500',
  ],
  secondary: [
    'bg-white',
    'text-gray-900',
    'border-2',
    'border-gray-300',
    'shadow-sm',
    'hover:bg-gray-50',
    'hover:border-gray-400',
    'hover:-translate-y-1',
    'focus:ring-gray-500',
    'dark:bg-gray-800',
    'dark:text-white',
    'dark:border-gray-600',
    'dark:hover:bg-gray-700',
  ],
  glass: [
    'bg-white/10',
    'backdrop-blur-xl',
    'text-white',
    'border',
    'border-white/20',
    'shadow-xl',
    'hover:bg-white/20',
    'hover:border-white/30',
    'hover:-translate-y-1',
    'focus:ring-white/50',
  ],
  neon: [
    'bg-gray-900',
    'text-cyan-400',
    'border-2',
    'border-cyan-400',
    'shadow-[0_0_20px_rgba(34,211,238,0.3)]',
    'hover:shadow-[0_0_30px_rgba(34,211,238,0.5)]',
    'hover:text-cyan-300',
    'hover:border-cyan-300',
    'focus:ring-cyan-400',
  ],
  gradient: [
    'bg-gradient-to-r',
    'from-pink-500',
    'via-purple-500',
    'to-blue-500',
    'text-white',
    'shadow-lg',
    'hover:from-pink-600',
    'hover:via-purple-600',
    'hover:to-blue-600',
    'hover:shadow-xl',
    'hover:-translate-y-1',
    'focus:ring-purple-500',
  ],
  minimal: [
    'bg-transparent',
    'text-gray-700',
    'hover:bg-gray-100',
    'hover:text-gray-900',
    'focus:ring-gray-500',
    'dark:text-gray-300',
    'dark:hover:bg-gray-800',
    'dark:hover:text-white',
  ],
  floating: [
    'bg-white',
    'text-gray-900',
    'shadow-[0_8px_30px_rgba(0,0,0,0.1)]',
    'hover:shadow-[0_12px_40px_rgba(0,0,0,0.15)]',
    'hover:-translate-y-2',
    'border-0',
    'focus:ring-blue-500',
    'dark:bg-gray-800',
    'dark:text-white',
  ],
  magnetic: [
    'bg-gradient-to-r',
    'from-indigo-600',
    'to-blue-600',
    'text-white',
    'shadow-lg',
    'hover:from-indigo-700',
    'hover:to-blue-700',
    'hover:shadow-xl',
    'cursor-none',
    'focus:ring-indigo-500',
  ],
};

const effectClasses = {
  ripple: 'overflow-hidden',
  glow: 'animate-pulse',
  magnetic: 'cursor-none',
  float: 'hover:animate-bounce',
  pulse: 'animate-pulse',
};

const buttonClasses = [
  ...baseClasses,
  sizeClasses[size],
  shapeClasses[shape],
  ...variantClasses[variant],
  effect && effectClasses[effect],
  fullWidth && 'w-full',
  disabled && 'opacity-50 cursor-not-allowed pointer-events-none',
  loading && 'cursor-wait',
  className,
].filter(Boolean).join(' ');
---

<Tag
  class={buttonClasses}
  href={href}
  target={target}
  type={!href ? type : undefined}
  disabled={disabled || loading}
  {...rest}
>
  <!-- Loading Spinner -->
  {loading && (
    <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  )}

  <!-- Left Icon -->
  {leftIcon && !loading && (
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <Fragment set:html={leftIcon} />
    </svg>
  )}

  <!-- Button Content -->
  <span class="relative z-10">
    <slot />
  </span>

  <!-- Right Icon -->
  {rightIcon && !loading && (
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <Fragment set:html={rightIcon} />
    </svg>
  )}

  <!-- Ripple Effect -->
  {effect === 'ripple' && (
    <span class="absolute inset-0 overflow-hidden rounded-inherit">
      <span class="absolute inset-0 bg-white/20 scale-0 group-active:scale-100 transition-transform duration-300 rounded-full"></span>
    </span>
  )}

  <!-- Glow Effect -->
  {effect === 'glow' && (
    <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
  )}

  <!-- Floating Particles for Neon -->
  {variant === 'neon' && (
    <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
      <div class="absolute top-2 left-4 w-1 h-1 bg-cyan-400 rounded-full animate-ping"></div>
      <div class="absolute bottom-3 right-6 w-1 h-1 bg-cyan-400 rounded-full animate-ping animation-delay-300"></div>
    </div>
  )}
</Tag>

<style>
  .animation-delay-300 {
    animation-delay: 300ms;
  }
  
  .cursor-none {
    cursor: none;
  }
  
  @keyframes magnetic-pull {
    0% { transform: translate(0, 0); }
    100% { transform: translate(var(--mouse-x, 0), var(--mouse-y, 0)); }
  }
  
  .magnetic:hover {
    animation: magnetic-pull 0.1s ease-out forwards;
  }
</style>


