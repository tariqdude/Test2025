---
export interface Props {
  title: string;
  description?: string;
  features: Array<{
    name: string;
    description?: string;
    included: boolean;
  }>;
  price: string;
  period?: string;
  popular?: boolean;
  cta: {
    text: string;
    href: string;
  };
  className?: string;
}

const {
  title,
  description,
  features,
  price,
  period = 'month',
  popular = false,
  cta,
  className = ''
} = Astro.props;
---

<div class={`relative bg-white dark:bg-gray-800 rounded-2xl border ${
  popular 
    ? 'border-primary-500 ring-2 ring-primary-500 ring-opacity-20' 
    : 'border-gray-200 dark:border-gray-700'
} p-8 ${className}`}>
  {popular && (
    <div class="absolute -top-4 left-1/2 transform -translate-x-1/2">
      <span class="bg-gradient-to-r from-primary-500 to-secondary-500 text-white px-4 py-2 rounded-full text-sm font-medium">
        Most Popular
      </span>
    </div>
  )}
  
  <div class="text-center mb-8">
    <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
      {title}
    </h3>
    {description && (
      <p class="text-gray-600 dark:text-gray-300 mb-6">
        {description}
      </p>
    )}
    
    <div class="mb-6">
      <span class="text-4xl font-bold text-gray-900 dark:text-white">
        {price}
      </span>
      <span class="text-gray-500 dark:text-gray-400">
        /{period}
      </span>
    </div>
    
    <a
      href={cta.href}
      class={`inline-flex items-center justify-center w-full px-6 py-3 rounded-lg font-medium transition-colors ${
        popular
          ? 'bg-primary-600 text-white hover:bg-primary-700'
          : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-600'
      }`}
    >
      {cta.text}
    </a>
  </div>
  
  <ul class="space-y-4">
    {features.map((feature) => (
      <li class="flex items-start">
        <div class={`flex-shrink-0 w-5 h-5 rounded-full flex items-center justify-center mt-0.5 mr-3 ${
          feature.included
            ? 'bg-green-100 dark:bg-green-900'
            : 'bg-gray-100 dark:bg-gray-700'
        }`}>
          <svg
            class={`w-3 h-3 ${
              feature.included
                ? 'text-green-600 dark:text-green-400'
                : 'text-gray-400 dark:text-gray-500'
            }`}
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            {feature.included ? (
              <path
                fill-rule="evenodd"
                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                clip-rule="evenodd"
              />
            ) : (
              <path
                fill-rule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clip-rule="evenodd"
              />
            )}
          </svg>
        </div>
        <span class={`text-sm ${
          feature.included
            ? 'text-gray-900 dark:text-white'
            : 'text-gray-500 dark:text-gray-400'
        }`}>
          {feature.name}
        </span>
      </li>
    ))}
  </ul>
</div>
