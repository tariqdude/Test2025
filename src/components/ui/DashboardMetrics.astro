---
export interface DashboardMetric {
  label: string;
  value: string | number;
  change?: number;
  changeType?: 'increase' | 'decrease' | 'neutral';
  trend?: number[];
  format?: 'number' | 'currency' | 'percentage';
}

export interface Props {
  metrics: DashboardMetric[];
  className?: string;
}

const { metrics, className = '' } = Astro.props;

const formatValue = (value: string | number, format?: string) => {
  if (typeof value === 'string') return value;
  
  switch (format) {
    case 'currency':
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
      }).format(value);
    case 'percentage':
      return `${value}%`;
    case 'number':
    default:
      return new Intl.NumberFormat('en-US').format(value);
  }
};

const getChangeIcon = (changeType?: string) => {
  switch (changeType) {
    case 'increase':
      return '↗';
    case 'decrease':
      return '↘';
    default:
      return '→';
  }
};

const getChangeColor = (changeType?: string) => {
  switch (changeType) {
    case 'increase':
      return 'text-green-600 dark:text-green-400';
    case 'decrease':
      return 'text-red-600 dark:text-red-400';
    default:
      return 'text-gray-600 dark:text-gray-400';
  }
};
---

<div class={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 ${className}`}>
  {metrics.map((metric) => (
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
            {metric.label}
          </p>
          <p class="text-2xl font-bold text-gray-900 dark:text-white">
            {formatValue(metric.value, metric.format)}
          </p>
        </div>
        
        {metric.trend && metric.trend.length > 0 && (
          <div class="w-16 h-8">
            <svg viewBox="0 0 64 32" class="w-full h-full">
              <polyline
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                class="text-primary-500"
                points={metric.trend.map((point, index) => 
                  `${(index / (metric.trend.length - 1)) * 64},${32 - (point / Math.max(...metric.trend) * 24)}`
                ).join(' ')}
              />
            </svg>
          </div>
        )}
      </div>
      
      {metric.change !== undefined && (
        <div class="flex items-center mt-4">
          <span class={`text-sm font-medium ${getChangeColor(metric.changeType)}`}>
            {getChangeIcon(metric.changeType)} {Math.abs(metric.change)}%
          </span>
          <span class="text-xs text-gray-500 dark:text-gray-400 ml-2">
            vs last period
          </span>
        </div>
      )}
    </div>
  ))}
</div>
