---
export interface Props {
  items: Array<{
    title: string;
    content: string;
    icon?: string;
  }>;
  variant?: 'accordion' | 'tabs';
  className?: string;
}

const { items, variant = 'accordion', className = '' } = Astro.props;
---

<div class={`faq ${className}`}>
  {variant === 'accordion' && (
    <div class="space-y-4">
      {items.map((item) => (
        <details class="group bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <summary class="flex items-center justify-between p-6 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg">
            <div class="flex items-center">
              {item.icon && (
                <div class="text-primary-600 dark:text-primary-400 mr-3">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <use href={`#${item.icon}`}></use>
                  </svg>
                </div>
              )}
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                {item.title}
              </h3>
            </div>
            <svg
              class="w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform group-open:rotate-180"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </summary>
          <div class="px-6 pb-6">
            <p class="text-gray-600 dark:text-gray-300 leading-relaxed">
              {item.content}
            </p>
          </div>
        </details>
      ))}
    </div>
  )}
</div>

<style>
  details[open] summary {
    border-bottom: 1px solid rgb(229 231 235);
  }
  
  .dark details[open] summary {
    border-bottom-color: rgb(55 65 81);
  }
</style>
