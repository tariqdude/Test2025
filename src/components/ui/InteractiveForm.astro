---
export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file';
  placeholder?: string;
  required?: boolean;
  validation?: {
    pattern?: string;
    minLength?: number;
    maxLength?: number;
    min?: number;
    max?: number;
  };
  options?: { value: string; label: string; }[];
  description?: string;
  icon?: string;
}

export interface Props {
  title?: string;
  description?: string;
  fields: FormField[];
  submitLabel?: string;
  className?: string;
  variant?: 'default' | 'modern' | 'glass' | 'minimal';
  layout?: 'vertical' | 'horizontal' | 'grid';
  animated?: boolean;
}

const {
  title = 'Contact Form',
  description = 'Get in touch with us',
  fields,
  submitLabel = 'Submit',
  className = '',
  variant = 'modern',
  layout = 'vertical',
  animated = true
} = Astro.props;

const baseClasses = 'w-full max-w-2xl mx-auto transition-all duration-500';

const variants = {
  default: 'bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-700 shadow-lg rounded-xl p-8',
  modern: 'bg-gradient-to-br from-white to-gray-50 dark:from-neutral-900 dark:to-neutral-800 border border-neutral-200 dark:border-neutral-700 shadow-2xl rounded-2xl p-8 backdrop-blur-sm',
  glass: 'bg-white/20 dark:bg-black/20 backdrop-blur-xl border border-white/30 dark:border-white/10 shadow-2xl rounded-2xl p-8',
  minimal: 'bg-transparent p-8'
};

const layoutClasses = {
  vertical: 'space-y-6',
  horizontal: 'flex flex-wrap gap-4',
  grid: 'grid grid-cols-1 md:grid-cols-2 gap-6'
};

const classes = `${baseClasses} ${variants[variant]} ${className}`;
---

<form class={classes} id="enhanced-form">
  <!-- Form Header -->
  {(title || description) && (
    <div class={`text-center mb-8 ${animated ? 'animate-slide-down' : ''}`}>
      {title && (
        <h2 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
          {title}
        </h2>
      )}
      {description && (
        <p class="text-gray-600 dark:text-gray-400">
          {description}
        </p>
      )}
    </div>
  )}

  <!-- Form Fields Container -->
  <div class={layoutClasses[layout]}>
    {fields.map((field, index) => (
      <div class={`form-field ${animated ? 'animate-slide-up' : ''}`} style={animated ? `animation-delay: ${index * 0.1}s` : ''}>
        <label 
          for={field.name}
          class="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2"
        >
          <div class="flex items-center gap-2">
            {field.icon && <span class="text-lg">{field.icon}</span>}
            {field.label}
            {field.required && <span class="text-red-500">*</span>}
          </div>
        </label>

        <div class="relative group">
          {field.type === 'text' || field.type === 'email' || field.type === 'password' ? (
            <input
              type={field.type}
              id={field.name}
              name={field.name}
              placeholder={field.placeholder}
              required={field.required}
              pattern={field.validation?.pattern}
              minlength={field.validation?.minLength}
              maxlength={field.validation?.maxLength}
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white transition-all duration-200 hover:border-gray-400 dark:hover:border-gray-500 group-hover:shadow-md"
            />
          ) : field.type === 'textarea' ? (
            <textarea
              id={field.name}
              name={field.name}
              placeholder={field.placeholder}
              required={field.required}
              minlength={field.validation?.minLength}
              maxlength={field.validation?.maxLength}
              rows="4"
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white transition-all duration-200 hover:border-gray-400 dark:hover:border-gray-500 group-hover:shadow-md resize-vertical"
            ></textarea>
          ) : field.type === 'select' ? (
            <select
              id={field.name}
              name={field.name}
              required={field.required}
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white transition-all duration-200 hover:border-gray-400 dark:hover:border-gray-500 group-hover:shadow-md"
            >
              <option value="">{field.placeholder || `Select ${field.label}`}</option>
              {field.options?.map(option => (
                <option value={option.value}>{option.label}</option>
              ))}
            </select>
          ) : field.type === 'checkbox' ? (
            <div class="flex items-center gap-3">
              <input
                type="checkbox"
                id={field.name}
                name={field.name}
                required={field.required}
                class="w-5 h-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2 transition-all duration-200"
              />
              <span class="text-gray-700 dark:text-gray-300">{field.placeholder}</span>
            </div>
          ) : field.type === 'radio' ? (
            <div class="space-y-3">
              {field.options?.map(option => (
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    id={`${field.name}-${option.value}`}
                    name={field.name}
                    value={option.value}
                    required={field.required}
                    class="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500 focus:ring-2 transition-all duration-200"
                  />
                  <label for={`${field.name}-${option.value}`} class="text-gray-700 dark:text-gray-300">
                    {option.label}
                  </label>
                </div>
              ))}
            </div>
          ) : field.type === 'file' ? (
            <input
              type="file"
              id={field.name}
              name={field.name}
              required={field.required}
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white transition-all duration-200 hover:border-gray-400 dark:hover:border-gray-500 group-hover:shadow-md file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          ) : null}

          <!-- Field Enhancement Effects -->
          <div class="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          
          <!-- Focus Ring Effect -->
          <div class="absolute inset-0 ring-2 ring-blue-500/20 rounded-lg opacity-0 focus-within:opacity-100 transition-opacity duration-200 pointer-events-none"></div>
        </div>

        {field.description && (
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            {field.description}
          </p>
        )}

        <!-- Field Validation Message -->
        <div class="mt-1 text-sm text-red-600 dark:text-red-400 opacity-0 transition-opacity duration-200" data-validation-message={field.name}>
          <!-- Validation messages will be inserted here by JavaScript -->
        </div>
      </div>
    ))}
  </div>

  <!-- Form Actions -->
  <div class={`flex flex-col sm:flex-row gap-4 justify-end mt-8 ${animated ? 'animate-slide-up' : ''}`} style={animated ? `animation-delay: ${fields.length * 0.1}s` : ''}>
    <button
      type="button"
      class="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 font-semibold"
    >
      Reset
    </button>
    
    <button
      type="submit"
      class="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 relative overflow-hidden group"
    >
      <span class="relative z-10 flex items-center gap-2">
        <span class="submit-text">{submitLabel}</span>
        <span class="loading-spinner hidden">
          <svg class="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
        <span class="submit-icon">✨</span>
      </span>
      
      <!-- Button shimmer effect -->
      <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent transition-transform duration-1000"></div>
    </button>
  </div>

  <!-- Success/Error Messages -->
  <div id="form-message" class="mt-6 p-4 rounded-lg hidden transition-all duration-300">
    <!-- Messages will be inserted here by JavaScript -->
  </div>
</form>

<script>
  // Enhanced form handling with validation and animations
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('enhanced-form') as HTMLFormElement;
    const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
    const submitText = submitButton?.querySelector('.submit-text') as HTMLElement;
    const loadingSpinner = submitButton?.querySelector('.loading-spinner') as HTMLElement;
    const submitIcon = submitButton?.querySelector('.submit-icon') as HTMLElement;
    const messageContainer = document.getElementById('form-message') as HTMLElement;

    if (!form) return;

    // Real-time validation
    form.addEventListener('input', function(e) {
      const target = e.target as HTMLInputElement;
      validateField(target);
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Validate all fields
      const isValid = validateForm();
      if (!isValid) return;

      // Show loading state
      setLoadingState(true);

      try {
        // Simulate form submission
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Show success message
        showMessage('✅ Form submitted successfully!', 'success');
        form.reset();
      } catch (error) {
        // Show error message
        showMessage('❌ There was an error submitting the form. Please try again.', 'error');
      } finally {
        setLoadingState(false);
      }
    });

    // Reset button functionality
    const resetButton = form.querySelector('button[type="button"]') as HTMLButtonElement;
    resetButton?.addEventListener('click', function() {
      form.reset();
      clearValidationMessages();
      hideMessage();
    });

    function validateField(field: HTMLInputElement): boolean {
      const validationMessage = document.querySelector(`[data-validation-message="${field.name}"]`) as HTMLElement;
      let isValid = true;
      let message = '';

      // Required field validation
      if (field.required && !field.value.trim()) {
        isValid = false;
        message = 'This field is required';
      }

      // Email validation
      if (field.type === 'email' && field.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid email address';
        }
      }

      // Pattern validation
      if (field.pattern && field.value) {
        const regex = new RegExp(field.pattern);
        if (!regex.test(field.value)) {
          isValid = false;
          message = 'Please enter a valid format';
        }
      }

      // Length validation
      if (field.minLength && field.value.length < field.minLength) {
        isValid = false;
        message = `Minimum ${field.minLength} characters required`;
      }

      // Update field appearance and message
      if (isValid) {
        field.classList.remove('border-red-500');
        field.classList.add('border-green-500');
        validationMessage.textContent = '';
        validationMessage.classList.remove('opacity-100');
        validationMessage.classList.add('opacity-0');
      } else {
        field.classList.remove('border-green-500');
        field.classList.add('border-red-500');
        validationMessage.textContent = message;
        validationMessage.classList.remove('opacity-0');
        validationMessage.classList.add('opacity-100');
      }

      return isValid;
    }

    function validateForm(): boolean {
      const fields = form.querySelectorAll('input, textarea, select') as NodeListOf<HTMLInputElement>;
      let isValid = true;

      fields.forEach(field => {
        if (!validateField(field)) {
          isValid = false;
        }
      });

      return isValid;
    }

    function setLoadingState(loading: boolean) {
      if (loading) {
        submitButton.disabled = true;
        submitText.textContent = 'Submitting...';
        loadingSpinner.classList.remove('hidden');
        submitIcon.classList.add('hidden');
        submitButton.classList.add('opacity-75');
      } else {
        submitButton.disabled = false;
        submitText.textContent = 'Submit';
        loadingSpinner.classList.add('hidden');
        submitIcon.classList.remove('hidden');
        submitButton.classList.remove('opacity-75');
      }
    }

    function showMessage(text: string, type: 'success' | 'error') {
      const bgClass = type === 'success' ? 'bg-green-100 text-green-800 border-green-200' : 'bg-red-100 text-red-800 border-red-200';
      
      messageContainer.className = `mt-6 p-4 rounded-lg border transition-all duration-300 ${bgClass}`;
      messageContainer.textContent = text;
      messageContainer.classList.remove('hidden');
    }

    function hideMessage() {
      messageContainer.classList.add('hidden');
    }

    function clearValidationMessages() {
      const validationMessages = form.querySelectorAll('[data-validation-message]') as NodeListOf<HTMLElement>;
      validationMessages.forEach(message => {
        message.textContent = '';
        message.classList.add('opacity-0');
      });

      const fields = form.querySelectorAll('input, textarea, select') as NodeListOf<HTMLInputElement>;
      fields.forEach(field => {
        field.classList.remove('border-red-500', 'border-green-500');
      });
    }
  });
</script>

<style>
  /* Enhanced form animations */
  .form-field {
    transition: all 0.3s ease-out;
  }
  
  .form-field:hover {
    transform: translateY(-1px);
  }
  
  /* Focus enhancement */
  .form-field input:focus,
  .form-field textarea:focus,
  .form-field select:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  /* Success animation */
  @keyframes success-bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
  }
  
  .success-animation {
    animation: success-bounce 0.6s ease-out;
  }
  
  /* Loading animation enhancement */
  .loading-pulse {
    animation: pulse 1.5s ease-in-out infinite;
  }
</style>
