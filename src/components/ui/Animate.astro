---
interface Props {
  animation?: 'fadeIn' | 'slideUp' | 'slideLeft' | 'slideRight' | 'scaleIn' | 'rotateIn';
  delay?: number;
  duration?: number;
  trigger?: 'scroll' | 'load' | 'hover' | 'manual';
  once?: boolean;
  className?: string;
}

const {
  animation = 'fadeIn',
  delay = 0,
  duration = 0.8,
  trigger = 'scroll',
  once = true,
  className = '',
  ...rest
} = Astro.props;

const animationClasses = {
  fadeIn: 'animate-fade-in',
  slideUp: 'animate-slide-up',
  slideLeft: 'animate-slide-left',
  slideRight: 'animate-slide-right',
  scaleIn: 'animate-scale-in',
  rotateIn: 'animate-rotate-in'
};

const baseClasses = 'transition-all';
const classes = [baseClasses, animationClasses[animation], className].filter(Boolean).join(' ');

const style = {
  '--animation-delay': `${delay}ms`,
  '--animation-duration': `${duration}s`
};
---

<div 
  class={classes}
  style={style}
  data-animation={animation}
  data-trigger={trigger}
  data-once={once}
  {...rest}
>
  <slot />
</div>

<script>
  class AnimationObserver {
    private observer: IntersectionObserver;
    private elements: Map<Element, { animation: string; triggered: boolean }> = new Map();

    constructor() {
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.triggerAnimation(entry.target);
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '50px'
        }
      );

      this.init();
    }

    init() {
      document.addEventListener('DOMContentLoaded', () => {
        this.observeElements();
      });

      // Re-observe when new elements are added
      const mutationObserver = new MutationObserver(() => {
        this.observeElements();
      });

      mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    }

    observeElements() {
      const animatedElements = document.querySelectorAll('[data-animation]');
      
      animatedElements.forEach((element) => {
        if (!this.elements.has(element)) {
          const animation = element.getAttribute('data-animation') || 'fadeIn';
          const trigger = element.getAttribute('data-trigger') || 'scroll';
          
          this.elements.set(element, { animation, triggered: false });
          
          if (trigger === 'scroll') {
            this.observer.observe(element);
          } else if (trigger === 'load') {
            this.triggerAnimation(element);
          }
          
          // Set initial state
          element.classList.add('opacity-0', 'transform');
          
          // Add hover trigger if specified
          if (trigger === 'hover') {
            element.addEventListener('mouseenter', () => {
              this.triggerAnimation(element);
            });
          }
        }
      });
    }

    triggerAnimation(element: Element) {
      const elementData = this.elements.get(element);
      if (!elementData || elementData.triggered) return;

      const once = element.getAttribute('data-once') === 'true';
      const delay = parseInt(element.getAttribute('style')?.match(/--animation-delay:\s*(\d+)ms/)?.[1] || '0');
      
      setTimeout(() => {
        element.classList.remove('opacity-0');
        element.classList.add('animate-in');
        
        if (once) {
          elementData.triggered = true;
          this.observer.unobserve(element);
        }
      }, delay);
    }
  }

  // Initialize the animation observer
  new AnimationObserver();
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from { 
      opacity: 0; 
      transform: translateY(30px);
    }
    to { 
      opacity: 1; 
      transform: translateY(0);
    }
  }

  @keyframes slideLeft {
    from { 
      opacity: 0; 
      transform: translateX(30px);
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
    }
  }

  @keyframes slideRight {
    from { 
      opacity: 0; 
      transform: translateX(-30px);
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    from { 
      opacity: 0; 
      transform: scale(0.9);
    }
    to { 
      opacity: 1; 
      transform: scale(1);
    }
  }

  @keyframes rotateIn {
    from { 
      opacity: 0; 
      transform: rotate(-10deg) scale(0.9);
    }
    to { 
      opacity: 1; 
      transform: rotate(0deg) scale(1);
    }
  }

  .animate-fade-in.animate-in {
    animation: fadeIn var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }

  .animate-slide-up.animate-in {
    animation: slideUp var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }

  .animate-slide-left.animate-in {
    animation: slideLeft var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }

  .animate-slide-right.animate-in {
    animation: slideRight var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }

  .animate-scale-in.animate-in {
    animation: scaleIn var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }

  .animate-rotate-in.animate-in {
    animation: rotateIn var(--animation-duration, 0.8s) ease-out var(--animation-delay, 0ms);
  }
</style>
