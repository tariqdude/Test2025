---
export interface Props {
  animation?: 'fade-in' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right' | 'scale' | 'rotate';
  duration?: 'fast' | 'normal' | 'slow';
  delay?: 'none' | 'sm' | 'md' | 'lg';
  trigger?: 'load' | 'hover' | 'scroll';
  className?: string;
}

const { 
  animation = 'fade-in', 
  duration = 'normal', 
  delay = 'none',
  trigger = 'load',
  className = '' 
} = Astro.props;

const animations = {
  'fade-in': 'animate-fade-in',
  'slide-up': 'animate-slide-up',
  'slide-down': 'animate-slide-down',
  'slide-left': 'animate-slide-left',
  'slide-right': 'animate-slide-right',
  'scale': 'animate-scale',
  'rotate': 'animate-rotate'
};

const durations = {
  fast: 'duration-200',
  normal: 'duration-300',
  slow: 'duration-500'
};

const delays = {
  none: '',
  sm: 'delay-100',
  md: 'delay-200',
  lg: 'delay-300'
};

const triggerClasses = {
  load: '',
  hover: 'hover:animate-none',
  scroll: 'opacity-0 translate-y-8'
};

const classes = `${animations[animation]} ${durations[duration]} ${delays[delay]} ${triggerClasses[trigger]} ${className}`.trim();
---

<div class={classes}>
  <slot />
</div>

{trigger === 'scroll' && (
  <script>
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-8');
          entry.target.classList.add('opacity-100', 'translate-y-0');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    document.addEventListener('DOMContentLoaded', () => {
      const animatedElements = document.querySelectorAll('[class*="animate-"]');
      animatedElements.forEach((el) => observer.observe(el));
    });
  </script>
)}
