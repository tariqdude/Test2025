---
import { SITE_TITLE } from '../consts';
import { withBasePath } from '../utils/helpers';

const homeHref = withBasePath('/');

const links = [
  { label: 'About', href: withBasePath('about/') },
  { label: 'Services', href: withBasePath('services/') },
  { label: 'Pricing', href: withBasePath('pricing/') },
  { label: 'Blog', href: withBasePath('blog/') },
];
---

<header
  class="sticky top-0 z-50 border-b border-white/10 bg-[rgba(15,23,42,0.78)] backdrop-blur-xl"
>
  <nav
    class="mx-auto flex max-w-[1220px] items-center justify-between px-5 py-4 sm:px-6 lg:px-8"
  >
    <a class="flex items-center gap-3 text-slate-100" href={homeHref}>
      <span
        class="inline-flex h-10 w-10 items-center justify-center rounded-xl border border-white/15 bg-white/5 text-xs font-semibold uppercase tracking-[0.32em] text-slate-100"
      >
        EP
      </span>
      <div class="flex flex-col leading-tight">
        <span class="text-sm font-semibold tracking-tight text-white">
          {SITE_TITLE}
        </span>
        <span
          class="text-[0.7rem] font-medium uppercase tracking-[0.32em] text-slate-400"
        >
          Static Operations Studio
        </span>
      </div>
    </a>

    <div class="hidden md:flex items-center gap-9 text-sm font-medium">
      <a class="text-slate-300 transition hover:text-white" href={homeHref}>
        Home
      </a>
      {
        links.map(link => (
          <a
            class="text-slate-300 transition hover:text-white"
            href={link.href}
          >
            {link.label}
          </a>
        ))
      }
    </div>

    <div class="hidden md:flex items-center gap-3">
      <a class="btn btn-secondary" href={withBasePath('showcase/')}>
        View showcase
      </a>
      <a class="btn btn-primary" href={withBasePath('contact/')}>
        Request a briefing
      </a>
    </div>

    <div class="md:hidden">
      <button
        class="inline-flex h-10 w-10 items-center justify-center rounded-lg border border-white/15 text-slate-200 transition hover:border-white/25 hover:text-white"
        id="mobile-menu-button"
        type="button"
        aria-controls="mobile-menu"
        aria-expanded="false"
      >
        <span class="sr-only">Toggle navigation</span>
        <svg
          class="h-5 w-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            d="M4 7h16M4 12h16M4 17h16"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"></path>
        </svg>
      </button>
    </div>
  </nav>

  <div class="md:hidden" id="mobile-menu" hidden>
    <div
      class="space-y-2 border-t border-white/10 bg-[rgba(11,19,35,0.92)] px-4 py-5 text-sm"
    >
      <a
        class="block rounded-lg px-3 py-2 font-medium text-slate-200 transition hover:bg-white/5"
        href={homeHref}
      >
        Home
      </a>
      {
        links.map(link => (
          <a
            class="block rounded-lg px-3 py-2 font-medium text-slate-200 transition hover:bg-white/5"
            href={link.href}
          >
            {link.label}
          </a>
        ))
      }
      <a
        class="block rounded-lg px-3 py-2 font-semibold text-slate-100 transition hover:bg-white/5"
        href={withBasePath('showcase/')}
      >
        View showcase
      </a>
      <a
        class="block rounded-lg bg-[rgba(99,102,241,0.15)] px-3 py-2 font-semibold text-white transition hover:bg-[rgba(99,102,241,0.25)]"
        href={withBasePath('contact/')}
      >
        Request a briefing
      </a>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');

    if (!toggle || !menu) {
      return;
    }

    const closeMenu = () => {
      menu.setAttribute('hidden', '');
      toggle.setAttribute('aria-expanded', 'false');
    };

    toggle.addEventListener('click', () => {
      const isHidden = menu.hasAttribute('hidden');
      if (isHidden) {
        menu.removeAttribute('hidden');
        toggle.setAttribute('aria-expanded', 'true');
      } else {
        closeMenu();
      }
    });

    document.addEventListener('keydown', event => {
      if (event.key === 'Escape') {
        closeMenu();
      }
    });
  });
</script>
