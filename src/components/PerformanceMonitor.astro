---
// Performance Monitor Component
// Real-time performance tracking and optimization insights

interface Props {
  className?: string;
}

const { className = '' } = Astro.props;

// Mock performance data (in production, fetch from monitoring service)
const performanceMetrics = {
  coreWebVitals: {
    fcp: { value: 1.2, threshold: 1.8, status: 'good' }, // First Contentful Paint
    lcp: { value: 2.1, threshold: 2.5, status: 'good' }, // Largest Contentful Paint
    cls: { value: 0.08, threshold: 0.1, status: 'good' }, // Cumulative Layout Shift
    fid: { value: 45, threshold: 100, status: 'good' } // First Input Delay
  },
  serverMetrics: {
    responseTime: { value: 120, threshold: 200, status: 'good' },
    uptime: { value: 99.98, threshold: 99.9, status: 'good' },
    errorRate: { value: 0.02, threshold: 0.1, status: 'good' },
    throughput: { value: 1250, threshold: 1000, status: 'good' }
  },
  optimization: {
    imageOptimization: 85,
    codeMinification: 92,
    compressionRatio: 78,
    cachingEfficiency: 88
  },
  realUserMetrics: {
    avgPageLoad: 1.8,
    bounceRate: 23.5,
    userSatisfaction: 4.6,
    conversionRate: 3.2
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'good': return '#22c55e';
    case 'needs-improvement': return '#f59e0b';
    case 'poor': return '#ef4444';
    default: return '#6b7280';
  }
};
---

<div class={`performance-monitor ${className}`}>
  <div class="monitor-header">
    <h2>Performance Dashboard</h2>
    <div class="status-indicator">
      <div class="status-dot good"></div>
      <span>All Systems Optimal</span>
    </div>
  </div>

  <!-- Core Web Vitals -->
  <section class="metrics-section">
    <h3>Core Web Vitals</h3>
    <div class="vitals-grid">
      <div class="vital-card">
        <div class="vital-header">
          <div class="vital-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="vital-info">
            <h4>First Contentful Paint</h4>
            <p>Time to first text/image</p>
          </div>
        </div>
        <div class="vital-metric">
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.coreWebVitals.fcp.status)}`}>
            {performanceMetrics.coreWebVitals.fcp.value}s
          </span>
          <div class="metric-bar">
            <div class="metric-fill" style={`width: ${(performanceMetrics.coreWebVitals.fcp.value / performanceMetrics.coreWebVitals.fcp.threshold) * 100}%; background: ${getStatusColor(performanceMetrics.coreWebVitals.fcp.status)}`}></div>
          </div>
          <span class="metric-threshold">Target: ≤{performanceMetrics.coreWebVitals.fcp.threshold}s</span>
        </div>
      </div>

      <div class="vital-card">
        <div class="vital-header">
          <div class="vital-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
              <circle cx="9" cy="9" r="2" stroke="currentColor" stroke-width="2"/>
              <path d="M21 15l-3.086-3.086a2 2 0 0 0-2.828 0L6 21" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <div class="vital-info">
            <h4>Largest Contentful Paint</h4>
            <p>Time to largest element</p>
          </div>
        </div>
        <div class="vital-metric">
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.coreWebVitals.lcp.status)}`}>
            {performanceMetrics.coreWebVitals.lcp.value}s
          </span>
          <div class="metric-bar">
            <div class="metric-fill" style={`width: ${(performanceMetrics.coreWebVitals.lcp.value / performanceMetrics.coreWebVitals.lcp.threshold) * 100}%; background: ${getStatusColor(performanceMetrics.coreWebVitals.lcp.status)}`}></div>
          </div>
          <span class="metric-threshold">Target: ≤{performanceMetrics.coreWebVitals.lcp.threshold}s</span>
        </div>
      </div>

      <div class="vital-card">
        <div class="vital-header">
          <div class="vital-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" stroke="currentColor" stroke-width="2"/>
              <polyline points="3.27,6.96 12,12.01 20.73,6.96" stroke="currentColor" stroke-width="2"/>
              <line x1="12" y1="22.08" x2="12" y2="12" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <div class="vital-info">
            <h4>Cumulative Layout Shift</h4>
            <p>Visual stability score</p>
          </div>
        </div>
        <div class="vital-metric">
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.coreWebVitals.cls.status)}`}>
            {performanceMetrics.coreWebVitals.cls.value}
          </span>
          <div class="metric-bar">
            <div class="metric-fill" style={`width: ${(performanceMetrics.coreWebVitals.cls.value / performanceMetrics.coreWebVitals.cls.threshold) * 100}%; background: ${getStatusColor(performanceMetrics.coreWebVitals.cls.status)}`}></div>
          </div>
          <span class="metric-threshold">Target: ≤{performanceMetrics.coreWebVitals.cls.threshold}</span>
        </div>
      </div>

      <div class="vital-card">
        <div class="vital-header">
          <div class="vital-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M21 12c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z" stroke="currentColor" stroke-width="2"/>
              <path d="M3 12c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z" stroke="currentColor" stroke-width="2"/>
              <path d="M12 3c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z" stroke="currentColor" stroke-width="2"/>
              <path d="M12 21c.552 0 1-.448 1-1s-.448-1-1-1-1 .448-1 1 .448 1 1 1z" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <div class="vital-info">
            <h4>First Input Delay</h4>
            <p>Interactivity responsiveness</p>
          </div>
        </div>
        <div class="vital-metric">
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.coreWebVitals.fid.status)}`}>
            {performanceMetrics.coreWebVitals.fid.value}ms
          </span>
          <div class="metric-bar">
            <div class="metric-fill" style={`width: ${(performanceMetrics.coreWebVitals.fid.value / performanceMetrics.coreWebVitals.fid.threshold) * 100}%; background: ${getStatusColor(performanceMetrics.coreWebVitals.fid.status)}`}></div>
          </div>
          <span class="metric-threshold">Target: ≤{performanceMetrics.coreWebVitals.fid.threshold}ms</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Server Metrics -->
  <section class="metrics-section">
    <h3>Server Performance</h3>
    <div class="server-grid">
      <div class="server-metric">
        <div class="metric-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
            <polyline points="12,6 12,12 16,14" stroke="currentColor" stroke-width="2"/>
          </svg>
        </div>
        <div class="metric-content">
          <span class="metric-label">Response Time</span>
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.serverMetrics.responseTime.status)}`}>
            {performanceMetrics.serverMetrics.responseTime.value}ms
          </span>
        </div>
      </div>

      <div class="server-metric">
        <div class="metric-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22 12h-4l-3 9L9 3l-3 9H2" stroke="currentColor" stroke-width="2"/>
          </svg>
        </div>
        <div class="metric-content">
          <span class="metric-label">Uptime</span>
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.serverMetrics.uptime.status)}`}>
            {performanceMetrics.serverMetrics.uptime.value}%
          </span>
        </div>
      </div>

      <div class="server-metric">
        <div class="metric-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" stroke="currentColor" stroke-width="2"/>
            <line x1="12" y1="9" x2="12" y2="13" stroke="currentColor" stroke-width="2"/>
            <line x1="12" y1="17" x2="12.01" y2="17" stroke="currentColor" stroke-width="2"/>
          </svg>
        </div>
        <div class="metric-content">
          <span class="metric-label">Error Rate</span>
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.serverMetrics.errorRate.status)}`}>
            {performanceMetrics.serverMetrics.errorRate.value}%
          </span>
        </div>
      </div>

      <div class="server-metric">
        <div class="metric-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <polyline points="22,12 18,12 15,21 9,3 6,12 2,12" stroke="currentColor" stroke-width="2"/>
          </svg>
        </div>
        <div class="metric-content">
          <span class="metric-label">Throughput</span>
          <span class="metric-value" style={`color: ${getStatusColor(performanceMetrics.serverMetrics.throughput.status)}`}>
            {performanceMetrics.serverMetrics.throughput.value} req/min
          </span>
        </div>
      </div>
    </div>
  </section>

  <!-- Optimization Score -->
  <section class="metrics-section">
    <h3>Optimization Score</h3>
    <div class="optimization-grid">
      <div class="optimization-item">
        <span class="optimization-label">Image Optimization</span>
        <div class="optimization-score">
          <div class="score-bar">
            <div class="score-fill" style={`width: ${performanceMetrics.optimization.imageOptimization}%`}></div>
          </div>
          <span class="score-value">{performanceMetrics.optimization.imageOptimization}%</span>
        </div>
      </div>

      <div class="optimization-item">
        <span class="optimization-label">Code Minification</span>
        <div class="optimization-score">
          <div class="score-bar">
            <div class="score-fill" style={`width: ${performanceMetrics.optimization.codeMinification}%`}></div>
          </div>
          <span class="score-value">{performanceMetrics.optimization.codeMinification}%</span>
        </div>
      </div>

      <div class="optimization-item">
        <span class="optimization-label">Compression Ratio</span>
        <div class="optimization-score">
          <div class="score-bar">
            <div class="score-fill" style={`width: ${performanceMetrics.optimization.compressionRatio}%`}></div>
          </div>
          <span class="score-value">{performanceMetrics.optimization.compressionRatio}%</span>
        </div>
      </div>

      <div class="optimization-item">
        <span class="optimization-label">Caching Efficiency</span>
        <div class="optimization-score">
          <div class="score-bar">
            <div class="score-fill" style={`width: ${performanceMetrics.optimization.cachingEfficiency}%`}></div>
          </div>
          <span class="score-value">{performanceMetrics.optimization.cachingEfficiency}%</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Real User Metrics -->
  <section class="metrics-section">
    <h3>Real User Metrics</h3>
    <div class="rum-grid">
      <div class="rum-card">
        <h4>Avg Page Load</h4>
        <span class="rum-value">{performanceMetrics.realUserMetrics.avgPageLoad}s</span>
        <span class="rum-trend positive">↗ 12% faster</span>
      </div>

      <div class="rum-card">
        <h4>Bounce Rate</h4>
        <span class="rum-value">{performanceMetrics.realUserMetrics.bounceRate}%</span>
        <span class="rum-trend positive">↘ 5% lower</span>
      </div>

      <div class="rum-card">
        <h4>User Satisfaction</h4>
        <span class="rum-value">{performanceMetrics.realUserMetrics.userSatisfaction}/5</span>
        <span class="rum-trend positive">↗ 0.3 higher</span>
      </div>

      <div class="rum-card">
        <h4>Conversion Rate</h4>
        <span class="rum-value">{performanceMetrics.realUserMetrics.conversionRate}%</span>
        <span class="rum-trend positive">↗ 18% higher</span>
      </div>
    </div>
  </section>
</div>

<style>
  .performance-monitor {
    background: var(--card-bg);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid var(--border-color);
  }

  .monitor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .monitor-header h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--text-muted);
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  .status-dot.good {
    background: #22c55e;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .metrics-section {
    margin-bottom: 2rem;
  }

  .metrics-section:last-child {
    margin-bottom: 0;
  }

  .metrics-section h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .vitals-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .vital-card {
    background: var(--background);
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--border-color);
  }

  .vital-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .vital-icon {
    width: 40px;
    height: 40px;
    background: rgba(99, 102, 241, 0.1);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-color);
  }

  .vital-info h4 {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .vital-info p {
    font-size: 0.75rem;
    color: var(--text-muted);
    margin: 0;
  }

  .vital-metric {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .metric-value {
    font-size: 1.5rem;
    font-weight: 700;
  }

  .metric-bar {
    height: 4px;
    background: var(--border-color);
    border-radius: 2px;
    overflow: hidden;
  }

  .metric-fill {
    height: 100%;
    border-radius: 2px;
    transition: width 0.3s ease;
  }

  .metric-threshold {
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .server-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .server-metric {
    background: var(--background);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .metric-icon {
    color: var(--primary-color);
  }

  .metric-content {
    display: flex;
    flex-direction: column;
  }

  .metric-label {
    font-size: 0.75rem;
    color: var(--text-muted);
    margin-bottom: 0.25rem;
  }

  .optimization-grid {
    display: grid;
    gap: 1rem;
  }

  .optimization-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }

  .optimization-label {
    font-size: 0.875rem;
    color: var(--text-primary);
    font-weight: 500;
  }

  .optimization-score {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .score-bar {
    width: 100px;
    height: 6px;
    background: var(--border-color);
    border-radius: 3px;
    overflow: hidden;
  }

  .score-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .score-value {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
    min-width: 40px;
    text-align: right;
  }

  .rum-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .rum-card {
    background: var(--background);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    text-align: center;
  }

  .rum-card h4 {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-muted);
    margin: 0 0 0.5rem 0;
  }

  .rum-value {
    display: block;
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
  }

  .rum-trend {
    font-size: 0.75rem;
    font-weight: 600;
  }

  .rum-trend.positive {
    color: #22c55e;
  }

  .rum-trend.negative {
    color: #ef4444;
  }

  @media (max-width: 768px) {
    .performance-monitor {
      padding: 1rem;
    }

    .monitor-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .vitals-grid {
      grid-template-columns: 1fr;
    }

    .server-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .rum-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>
