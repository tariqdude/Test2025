---
// Elite Error Dashboard Component
// Real-time visualization of error analysis and project health

import type { CodeIssue, ProjectHealth } from '../types/analysis';

interface Props {
  className?: string;
  realTime?: boolean;
}

const { className = '', realTime = false } = Astro.props;

// Mock data for demonstration (in production, this would come from the error reviewer)
const mockIssues: CodeIssue[] = [
  {
    id: 'ts-001',
    type: 'type',
    severity: { level: 'critical', impact: 'blocking', urgency: 'immediate' },
    title: 'Type Error in ThemeProvider',
    description: "Property 'colors' does not exist on type 'undefined'",
    file: 'src/components/ThemeProvider.astro',
    line: 15,
    column: 12,
    rule: 'TS2339',
    category: 'TypeScript',
    source: 'typescript',
    suggestion: 'Add null check or default value for theme object',
    autoFixable: true,
    context: {
      current: 'const color = theme.colors.primary;',
      before: ['const theme = themes[themeName];', 'if (theme) {'],
      after: ['  // Use theme colors', '}'],
    },
    metadata: {
      component: 'ThemeProvider',
      framework: 'astro',
      checksum: 'abc123',
      timestamp: new Date(),
    },
  },
  {
    id: 'sec-001',
    type: 'security',
    severity: { level: 'high', impact: 'major', urgency: 'high' },
    title: 'Potential XSS Vulnerability',
    description: 'Direct innerHTML assignment without sanitization',
    file: 'src/components/ContactForm.astro',
    line: 89,
    rule: 'security-innerHTML',
    category: 'Security',
    source: 'security-scanner',
    suggestion: 'Use textContent or sanitize with DOMPurify',
    autoFixable: false,
    context: {
      current: 'element.innerHTML = userInput;',
    },
    metadata: {
      checksum: 'def456',
      timestamp: new Date(),
    },
  },
  {
    id: 'perf-001',
    type: 'performance',
    severity: { level: 'medium', impact: 'minor', urgency: 'medium' },
    title: 'Large Bundle Size',
    description: 'Bundle size exceeds recommended threshold',
    file: 'build-output',
    rule: 'bundle-size',
    category: 'Performance',
    source: 'bundle-analyzer',
    suggestion: 'Consider code splitting or removing unused dependencies',
    autoFixable: false,
    context: {
      current: 'Bundle size: 2.5MB (recommended: <1MB)',
    },
    metadata: {
      checksum: 'ghi789',
      timestamp: new Date(),
    },
  },
];

const mockHealth: ProjectHealth = {
  score: 78,
  criticalIssues: 1,
  highIssues: 2,
  mediumIssues: 4,
  lowIssues: 8,
  totalIssues: 15,
  categories: {
    TypeScript: 5,
    Security: 3,
    Performance: 4,
    Accessibility: 2,
    Git: 1,
  },
  trends: {
    improving: true,
    velocity: 0.8,
    lastCheck: new Date(),
  },
};

const categoryEntries = Object.entries(mockHealth.categories) as Array<
  [string, number]
>;
const categoryCounts = categoryEntries.map(([, count]) => count);
const maxCategoryCount =
  categoryCounts.length > 0 ? Math.max(...categoryCounts) : 0;
---

<div class={`error-dashboard ${className}`}>
  <!-- Dashboard Header -->
  <div class="dashboard-header">
    <div class="header-content">
      <h1 class="dashboard-title">üõ°Ô∏è Elite Error Dashboard</h1>
      <div class="last-updated">
        Last updated: {new Date().toLocaleString()}
      </div>
    </div>
    {
      realTime && (
        <div class="real-time-indicator">
          <div class="pulse-dot" />
          Live
        </div>
      )
    }
  </div>

  <!-- Health Score Section -->
  <div class="health-overview">
    <div class="health-card">
      <div class="health-score">
        <div
          class={`score-circle score-${mockHealth.score >= 90 ? 'excellent' : mockHealth.score >= 70 ? 'good' : mockHealth.score >= 50 ? 'warning' : 'critical'}`}
        >
          <div class="score-number">{mockHealth.score}</div>
          <div class="score-label">Health</div>
        </div>
        <div class="health-details">
          <div class="health-trend">
            <span
              class={`trend-icon ${mockHealth.trends.improving ? 'improving' : 'declining'}`}
            >
              {mockHealth.trends.improving ? 'üìà' : 'üìâ'}
            </span>
            <span class="trend-text">
              {mockHealth.trends.improving ? 'Improving' : 'Declining'}
            </span>
          </div>
          <div class="velocity">
            Velocity: {(mockHealth.trends.velocity * 100).toFixed(1)}%
          </div>
        </div>
      </div>
    </div>

    <!-- Issue Summary Cards -->
    <div class="issue-summary">
      <div class="issue-card critical">
        <div class="issue-icon">üö®</div>
        <div class="issue-count">{mockHealth.criticalIssues}</div>
        <div class="issue-label">Critical</div>
      </div>
      <div class="issue-card high">
        <div class="issue-icon">‚ö†Ô∏è</div>
        <div class="issue-count">{mockHealth.highIssues}</div>
        <div class="issue-label">High</div>
      </div>
      <div class="issue-card medium">
        <div class="issue-icon">üìã</div>
        <div class="issue-count">{mockHealth.mediumIssues}</div>
        <div class="issue-label">Medium</div>
      </div>
      <div class="issue-card low">
        <div class="issue-icon">‚ÑπÔ∏è</div>
        <div class="issue-count">{mockHealth.lowIssues}</div>
        <div class="issue-label">Low</div>
      </div>
    </div>
  </div>

  <!-- Categories Breakdown -->
  <div class="categories-section">
    <h2>Issues by Category</h2>
    <div class="categories-grid">
      {
        categoryEntries.map(([category, count]) => (
          <div class="category-card">
            <div class="category-header">
              <span class="category-icon">
                {category === 'TypeScript'
                  ? 'üè∑Ô∏è'
                  : category === 'Security'
                    ? 'üîí'
                    : category === 'Performance'
                      ? '‚ö°'
                      : category === 'Accessibility'
                        ? '‚ôø'
                        : category === 'Git'
                          ? 'üìù'
                          : 'üìÇ'}
              </span>
              <span class="category-name">{category}</span>
            </div>
            <div class="category-count">{count}</div>
            <div class="category-bar">
              <div
                class="category-fill"
                style={`width: ${maxCategoryCount > 0 ? (count / maxCategoryCount) * 100 : 0}%`}
              />
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Critical Issues List -->
  <div class="critical-issues">
    <h2>üö® Critical Issues</h2>
    <div class="issues-list">
      {
        mockIssues
          .filter(issue => issue.severity.level === 'critical')
          .map(issue => (
            <div class="issue-item critical-issue">
              <div class="issue-header">
                <div class="issue-title">{issue.title}</div>
                <div class="issue-badges">
                  <span class="severity-badge critical">
                    {issue.severity.level}
                  </span>
                  <span class="type-badge">{issue.type}</span>
                  {issue.autoFixable && (
                    <span class="auto-fix-badge">üîß Auto-fix</span>
                  )}
                </div>
              </div>
              <div class="issue-description">{issue.description}</div>
              <div class="issue-location">
                üìÅ {issue.file}
                {issue.line ? `:${issue.line}` : ''}
              </div>
              {issue.suggestion && (
                <div class="issue-suggestion">üí° {issue.suggestion}</div>
              )}
            </div>
          ))
      }
    </div>
  </div>

  <!-- All Issues Table -->
  <div class="all-issues">
    <h2>All Issues ({mockIssues.length})</h2>
    <div class="issues-table-container">
      <table class="issues-table">
        <thead>
          <tr>
            <th>Severity</th>
            <th>Type</th>
            <th>Title</th>
            <th>File</th>
            <th>Line</th>
            <th>Category</th>
            <th>Auto-fix</th>
          </tr>
        </thead>
        <tbody>
          {
            mockIssues.map(issue => (
              <tr class={`issue-row severity-${issue.severity.level}`}>
                <td>
                  <span class={`severity-indicator ${issue.severity.level}`}>
                    {issue.severity.level === 'critical'
                      ? 'üö®'
                      : issue.severity.level === 'high'
                        ? '‚ö†Ô∏è'
                        : issue.severity.level === 'medium'
                          ? 'üìã'
                          : '‚ÑπÔ∏è'}
                    {issue.severity.level}
                  </span>
                </td>
                <td>
                  <span class="type-indicator">
                    {issue.type === 'type'
                      ? 'üè∑Ô∏è'
                      : issue.type === 'security'
                        ? 'üîí'
                        : issue.type === 'performance'
                          ? '‚ö°'
                          : issue.type === 'accessibility'
                            ? '‚ôø'
                            : 'üêõ'}
                    {issue.type}
                  </span>
                </td>
                <td class="issue-title-cell">{issue.title}</td>
                <td class="file-cell">{issue.file}</td>
                <td class="line-cell">{issue.line || 'N/A'}</td>
                <td class="category-cell">{issue.category}</td>
                <td class="autofix-cell">{issue.autoFixable ? '‚úÖ' : '‚ùå'}</td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </div>

  <!-- Actions Panel -->
  <div class="actions-panel">
    <h2>Quick Actions</h2>
    <div class="action-buttons">
      <button
        class="action-btn primary"
        onclick="alert('üîç Running comprehensive analysis...\nThis would trigger the error reviewer in a real implementation.');"
      >
        üîç Run Analysis
      </button>
      <button
        class="action-btn secondary"
        onclick="alert('üîß Auto-fixing issues...\nThis would apply automatic fixes to fixable issues.');"
      >
        üîß Auto-fix Issues
      </button>
      <button
        class="action-btn secondary"
        onclick="alert('üìä Exporting report...\nThis would generate and download a detailed report.');"
      >
        üìä Export Report
      </button>
      <button
        class="action-btn secondary"
        onclick="alert('üöÄ Checking deployment readiness...\nThis would run pre-deployment validation.');"
      >
        üöÄ Deployment Check
      </button>
    </div>
  </div>
</div>

<style>
  .error-dashboard {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    font-family: var(--font-family-sans, system-ui);
    background: var(--color-background, #ffffff);
    color: var(--color-text-primary, #1f2937);
    min-height: 100vh;
  }

  /* Dashboard Header */
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--color-border, #e5e7eb);
  }

  .dashboard-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .last-updated {
    font-size: 0.875rem;
    color: var(--color-text-muted, #6b7280);
    margin-top: 0.5rem;
  }

  .real-time-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #10b981;
    color: white;
    border-radius: 1rem;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .pulse-dot {
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  /* Health Overview */
  .health-overview {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .health-card {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1));
  }

  .health-score {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .score-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    position: relative;
    background: conic-gradient(
      from 0deg,
      var(--score-color) var(--score-percentage),
      #e5e7eb var(--score-percentage)
    );
  }

  .score-excellent {
    --score-color: #10b981;
    --score-percentage: calc(var(--score) * 1%);
  }

  .score-good {
    --score-color: #3b82f6;
    --score-percentage: calc(var(--score) * 1%);
  }

  .score-warning {
    --score-color: #f59e0b;
    --score-percentage: calc(var(--score) * 1%);
  }

  .score-critical {
    --score-color: #ef4444;
    --score-percentage: calc(var(--score) * 1%);
  }

  .score-number {
    font-size: 2rem;
    font-weight: 800;
  }

  .score-label {
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  .health-details {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .health-trend {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .trend-icon.improving {
    color: #10b981;
  }

  .trend-icon.declining {
    color: #ef4444;
  }

  /* Issue Summary */
  .issue-summary {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1rem;
  }

  .issue-card {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 0.75rem;
    padding: 1.5rem;
    text-align: center;
    transition: transform 0.2s ease;
  }

  .issue-card:hover {
    transform: translateY(-2px);
  }

  .issue-card.critical {
    border-left: 4px solid #ef4444;
  }

  .issue-card.high {
    border-left: 4px solid #f59e0b;
  }

  .issue-card.medium {
    border-left: 4px solid #3b82f6;
  }

  .issue-card.low {
    border-left: 4px solid #10b981;
  }

  .issue-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .issue-count {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
  }

  .issue-label {
    font-size: 0.875rem;
    color: var(--color-text-muted, #6b7280);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Categories Section */
  .categories-section {
    margin-bottom: 3rem;
  }

  .categories-section h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  .category-card {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 0.75rem;
    padding: 1.5rem;
  }

  .category-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .category-icon {
    font-size: 1.5rem;
  }

  .category-name {
    font-weight: 600;
  }

  .category-count {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .category-bar {
    width: 100%;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
  }

  .category-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    transition: width 0.3s ease;
  }

  /* Critical Issues */
  .critical-issues {
    margin-bottom: 3rem;
  }

  .critical-issues h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .issues-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .issue-item {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 0.75rem;
    padding: 1.5rem;
  }

  .critical-issue {
    border-left: 4px solid #ef4444;
    background: #fef2f2;
  }

  .issue-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .issue-title {
    font-size: 1.125rem;
    font-weight: 600;
  }

  .issue-badges {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .severity-badge,
  .type-badge,
  .auto-fix-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .severity-badge.critical {
    background: #fef2f2;
    color: #dc2626;
  }

  .type-badge {
    background: #eff6ff;
    color: #2563eb;
  }

  .auto-fix-badge {
    background: #f0fdf4;
    color: #16a34a;
  }

  .issue-description {
    margin-bottom: 0.75rem;
    color: var(--color-text-secondary, #4b5563);
  }

  .issue-location {
    font-family: var(--font-family-mono, monospace);
    font-size: 0.875rem;
    color: var(--color-text-muted, #6b7280);
    margin-bottom: 0.75rem;
  }

  .issue-suggestion {
    padding: 0.75rem;
    background: #fffbeb;
    border: 1px solid #fed7aa;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    color: #92400e;
  }

  /* Issues Table */
  .all-issues {
    margin-bottom: 3rem;
  }

  .all-issues h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .issues-table-container {
    overflow-x: auto;
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 0.75rem;
  }

  .issues-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--color-surface, #ffffff);
  }

  .issues-table th {
    background: #f9fafb;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    border-bottom: 1px solid var(--color-border, #e5e7eb);
  }

  .issues-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--color-border, #e5e7eb);
  }

  .issue-row:hover {
    background: #f9fafb;
  }

  .severity-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .type-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .issue-title-cell {
    max-width: 300px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .file-cell {
    font-family: var(--font-family-mono, monospace);
    font-size: 0.875rem;
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  /* Actions Panel */
  .actions-panel {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    border-radius: 1rem;
    padding: 2rem;
  }

  .actions-panel h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .action-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .action-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .action-btn.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
  }

  .action-btn.secondary {
    background: var(--color-surface, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    color: var(--color-text-primary, #1f2937);
  }

  .action-btn.secondary:hover {
    background: #f9fafb;
    transform: translateY(-1px);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .health-overview {
      grid-template-columns: 1fr;
    }

    .issue-summary {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .error-dashboard {
      padding: 1rem;
    }

    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .health-score {
      flex-direction: column;
      text-align: center;
    }

    .issue-summary {
      grid-template-columns: 1fr;
    }

    .categories-grid {
      grid-template-columns: 1fr;
    }

    .action-buttons {
      flex-direction: column;
    }

    .issue-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>

<script>
  // Real-time updates (if enabled)
  const indicator = document.querySelector('.real-time-indicator');
  if (indicator) {
    setInterval(() => {
      const timestamp = new Date().toISOString();
      indicator.setAttribute('data-last-check', timestamp);
      indicator.dispatchEvent(
        new CustomEvent('error-dashboard:heartbeat', {
          bubbles: true,
          detail: { timestamp },
        })
      );
    }, 30000);
  }
</script>
