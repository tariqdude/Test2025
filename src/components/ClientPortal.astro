---
// Client Portal Component
// Provides client dashboard with project status, documents, and communication

interface Props {
  className?: string;
  clientId?: string;
}

const { className = '' } = Astro.props;

// Mock client data (in production, fetch from database)
const clientData = {
  name: 'Acme Corporation',
  email: 'john.doe@acme.com',
  phone: '+1 (555) 123-4567',
  accountManager: 'Sarah Johnson',
  joinDate: '2024-01-15',
  status: 'Active',
  tier: 'Enterprise'
};

const projects = [
  {
    id: 'proj-001',
    name: 'E-commerce Platform Redesign',
    status: 'In Progress',
    progress: 75,
    deadline: '2025-02-15',
    budget: 85000,
    spent: 63750
  },
  {
    id: 'proj-002',
    name: 'Mobile App Development',
    status: 'Planning',
    progress: 15,
    deadline: '2025-04-30',
    budget: 120000,
    spent: 18000
  },
  {
    id: 'proj-003',
    name: 'Data Analytics Dashboard',
    status: 'Completed',
    progress: 100,
    deadline: '2024-12-01',
    budget: 45000,
    spent: 43200
  }
];

const documents = [
  {
    id: 'doc-001',
    name: 'Project Proposal - E-commerce Platform.pdf',
    type: 'proposal',
    size: '2.4 MB',
    date: '2024-01-20',
    downloadUrl: '#'
  },
  {
    id: 'doc-002',
    name: 'Technical Specifications.docx',
    type: 'specification',
    size: '1.8 MB',
    date: '2024-02-05',
    downloadUrl: '#'
  },
  {
    id: 'doc-003',
    name: 'Monthly Progress Report - December.pdf',
    type: 'report',
    size: '3.2 MB',
    date: '2024-12-31',
    downloadUrl: '#'
  },
  {
    id: 'doc-004',
    name: 'Invoice #2024-0156.pdf',
    type: 'invoice',
    size: '156 KB',
    date: '2024-12-15',
    downloadUrl: '#'
  }
];

const messages = [
  {
    id: 'msg-001',
    from: 'Sarah Johnson',
    subject: 'Project Update - E-commerce Platform',
    preview: 'Great progress this week! The new checkout flow is ready for testing...',
    date: '2025-01-03',
    read: false
  },
  {
    id: 'msg-002',
    from: 'Mike Chen',
    subject: 'Mobile App Wireframes Ready',
    preview: 'The wireframes for the mobile app are complete and ready for your review...',
    date: '2025-01-02',
    read: true
  },
  {
    id: 'msg-003',
    from: 'Sarah Johnson',
    subject: 'Happy New Year & Q1 Planning',
    preview: 'Wishing you a great start to 2025! Let\'s schedule a call to discuss Q1 priorities...',
    date: '2025-01-01',
    read: true
  }
];

const getStatusColor = (status: string) => {
  switch (status.toLowerCase()) {
    case 'completed': return '#22c55e';
    case 'in progress': return '#3b82f6';
    case 'planning': return '#f59e0b';
    case 'on hold': return '#ef4444';
    default: return '#6b7280';
  }
};

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 0
  }).format(amount);
};

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};
---

<div class={`client-portal ${className}`}>
  <div class="portal-header">
    <div class="client-info">
      <div class="client-avatar">
        <span>{clientData.name.split(' ').map(n => n[0]).join('')}</span>
      </div>
      <div class="client-details">
        <h1>Welcome back, {clientData.name}</h1>
        <p>Account Manager: {clientData.accountManager}</p>
        <div class="client-badges">
          <span class="badge status-active">{clientData.status}</span>
          <span class="badge tier">{clientData.tier}</span>
        </div>
      </div>
    </div>
    <div class="portal-actions">
      <button class="btn btn-outline">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z" stroke="currentColor" stroke-width="2"/>
          <polyline points="22,6 12,13 2,6" stroke="currentColor" stroke-width="2"/>
        </svg>
        Contact Team
      </button>
      <button class="btn btn-primary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
          <polygon points="10,8 16,12 10,16 10,8" stroke="currentColor" stroke-width="2"/>
        </svg>
        Schedule Meeting
      </button>
    </div>
  </div>

  <div class="portal-content">
    <div class="portal-grid">
      <!-- Projects Section -->
      <section class="portal-section projects-section">
        <div class="section-header">
          <h2>Active Projects</h2>
          <button class="btn btn-ghost btn-sm">View All</button>
        </div>
        
        <div class="projects-list">
          {projects.map(project => (
            <div class="project-card">
              <div class="project-header">
                <h3>{project.name}</h3>
                <span class="project-status" style={`color: ${getStatusColor(project.status)}`}>
                  {project.status}
                </span>
              </div>
              
              <div class="project-progress">
                <div class="progress-info">
                  <span>Progress</span>
                  <span>{project.progress}%</span>
                </div>
                <div class="progress-bar">
                  <div class="progress-fill" style={`width: ${project.progress}%`}></div>
                </div>
              </div>
              
              <div class="project-details">
                <div class="detail-item">
                  <span class="detail-label">Deadline:</span>
                  <span class="detail-value">{formatDate(project.deadline)}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Budget:</span>
                  <span class="detail-value">{formatCurrency(project.spent)} / {formatCurrency(project.budget)}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>

      <!-- Messages Section -->
      <section class="portal-section messages-section">
        <div class="section-header">
          <h2>Recent Messages</h2>
          <button class="btn btn-ghost btn-sm">View All</button>
        </div>
        
        <div class="messages-list">
          {messages.map(message => (
            <div class={`message-item ${!message.read ? 'unread' : ''}`}>
              <div class="message-header">
                <span class="message-from">{message.from}</span>
                <span class="message-date">{formatDate(message.date)}</span>
              </div>
              <h4 class="message-subject">{message.subject}</h4>
              <p class="message-preview">{message.preview}</p>
              {!message.read && <div class="unread-indicator"></div>}
            </div>
          ))}
        </div>
      </section>

      <!-- Documents Section -->
      <section class="portal-section documents-section">
        <div class="section-header">
          <h2>Documents & Files</h2>
          <button class="btn btn-ghost btn-sm">Upload File</button>
        </div>
        
        <div class="documents-list">
          {documents.map(document => (
            <div class="document-item">
              <div class="document-icon">
                {document.type === 'proposal' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2"/>
                    <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2"/>
                    <line x1="16" y1="13" x2="8" y2="13" stroke="currentColor" stroke-width="2"/>
                    <line x1="16" y1="17" x2="8" y2="17" stroke="currentColor" stroke-width="2"/>
                    <polyline points="10,9 9,9 8,9" stroke="currentColor" stroke-width="2"/>
                  </svg>
                )}
                {document.type === 'specification' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2"/>
                    <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2"/>
                    <line x1="16" y1="13" x2="8" y2="13" stroke="currentColor" stroke-width="2"/>
                    <line x1="16" y1="17" x2="8" y2="17" stroke="currentColor" stroke-width="2"/>
                  </svg>
                )}
                {document.type === 'report' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2"/>
                    <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2"/>
                    <path d="M9 15h6" stroke="currentColor" stroke-width="2"/>
                    <path d="M9 18h6" stroke="currentColor" stroke-width="2"/>
                    <path d="M9 12h1" stroke="currentColor" stroke-width="2"/>
                  </svg>
                )}
                {document.type === 'invoice' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2"/>
                    <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2"/>
                    <line x1="12" y1="18" x2="12" y2="12" stroke="currentColor" stroke-width="2"/>
                    <line x1="9" y1="15" x2="15" y2="15" stroke="currentColor" stroke-width="2"/>
                  </svg>
                )}
              </div>
              <div class="document-info">
                <h4 class="document-name">{document.name}</h4>
                <div class="document-meta">
                  <span>{document.size}</span>
                  <span>•</span>
                  <span>{formatDate(document.date)}</span>
                </div>
              </div>
              <button class="document-download">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2"/>
                  <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2"/>
                  <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
            </div>
          ))}
        </div>
      </section>
    </div>
  </div>
</div>

<style>
  .client-portal {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .portal-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
  }

  .client-info {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .client-avatar {
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
  }

  .client-details h1 {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .client-details p {
    color: var(--text-muted);
    margin: 0 0 0.5rem 0;
  }

  .client-badges {
    display: flex;
    gap: 0.5rem;
  }

  .badge {
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .badge.status-active {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .badge.tier {
    background: rgba(99, 102, 241, 0.1);
    color: #6366f1;
  }

  .portal-actions {
    display: flex;
    gap: 1rem;
  }

  .portal-content {
    padding: 0;
  }

  .portal-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    gap: 2rem;
  }

  .projects-section {
    grid-column: 1 / -1;
  }

  .portal-section {
    background: var(--card-bg);
    border-radius: 16px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .section-header h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .projects-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .project-card {
    background: var(--background);
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
  }

  .project-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    border-color: var(--primary-color);
  }

  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .project-header h3 {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    line-height: 1.4;
  }

  .project-status {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    background: currentColor;
    color: white !important;
    opacity: 0.9;
  }

  .project-progress {
    margin-bottom: 1rem;
  }

  .progress-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .progress-info span:first-child {
    color: var(--text-muted);
  }

  .progress-info span:last-child {
    color: var(--text-primary);
    font-weight: 600;
  }

  .progress-bar {
    height: 6px;
    background: var(--border-color);
    border-radius: 3px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .project-details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
  }

  .detail-label {
    color: var(--text-muted);
  }

  .detail-value {
    color: var(--text-primary);
    font-weight: 500;
  }

  .messages-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message-item {
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    border: 1px solid var(--border-color);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .message-item:hover {
    border-color: var(--primary-color);
    transform: translateX(4px);
  }

  .message-item.unread {
    border-left: 4px solid var(--primary-color);
    background: rgba(99, 102, 241, 0.02);
  }

  .message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .message-from {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .message-date {
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .message-subject {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
    line-height: 1.4;
  }

  .message-preview {
    font-size: 0.8rem;
    color: var(--text-muted);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .unread-indicator {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 8px;
    height: 8px;
    background: var(--primary-color);
    border-radius: 50%;
  }

  .documents-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .document-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
  }

  .document-item:hover {
    border-color: var(--primary-color);
    transform: translateY(-1px);
  }

  .document-icon {
    width: 40px;
    height: 40px;
    background: rgba(99, 102, 241, 0.1);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-color);
    flex-shrink: 0;
  }

  .document-info {
    flex: 1;
  }

  .document-name {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
    line-height: 1.4;
  }

  .document-meta {
    font-size: 0.75rem;
    color: var(--text-muted);
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .document-download {
    width: 32px;
    height: 32px;
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-muted);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .document-download:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  @media (max-width: 768px) {
    .client-portal {
      padding: 1rem;
    }

    .portal-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .portal-actions {
      width: 100%;
      justify-content: flex-start;
    }

    .portal-grid {
      grid-template-columns: 1fr;
    }

    .projects-section {
      grid-column: 1;
    }

    .projects-list {
      grid-template-columns: 1fr;
    }

    .client-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .client-details {
      text-align: left;
    }
  }
</style>

<script>
  // Handle interactive elements
  document.addEventListener('DOMContentLoaded', () => {
    // Message click handlers
    const messageItems = document.querySelectorAll('.message-item');
    messageItems.forEach(item => {
      item.addEventListener('click', () => {
        item.classList.remove('unread');
        console.log('Message opened');
      });
    });

    // Document download handlers
    const downloadButtons = document.querySelectorAll('.document-download');
    downloadButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        console.log('Document download initiated');
      });
    });

    // Project card click handlers
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
      card.addEventListener('click', () => {
        console.log('Project details opened');
      });
    });
  });
</script>
